Find All Anagrams in a String

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

Solution:
Python:

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        
        res = []
        p_d = Counter(p)
        s_d = Counter(s[0: len(p)])
        l = 0
        r = l + len(p) - 1
        while r < len(s):
            if p_d == s_d:
                res.append(l)
            s_d[s[l]] -= 1
            if s_d[s[l]] == 0:
                del s_d[s[l]]
            l += 1
            if r + 1 < len(s):
                if s[r + 1] not in s_d:
                    s_d[s[r + 1]] = 1
                else:
                    s_d[s[r + 1]] += 1
            r += 1
        return res 
